#!/bin/bash
#
#########################################################
#                                                       #
#            WPSD Modem Firmware Update Utility         #
#                  Chip Cuccio (W0CHP)                  #
#                                                       #
#########################################################
#
if [ "$(id -u)" != "0" ]; then
  echo -e "\nYou need to be root to run this command...\n"
  exit 1
fi

#
# Non interactive mode, pass "NP=1" env. var. E.g. `sudo NP=1 wpsd-modemupdate <foo>`
#

OS_VER=$( cat /etc/debian_version | sed 's/\..*//')
source /usr/local/sbin/.wpsd-common-funcs

# Check CLI arguments and determine the modem type and its respective FW file...
if [ "$1" ]; then
  case $1 in
    # common HS_HATs
    hs_hat)
      firmware_file="mmdvm_hs_hat_fw.bin"
      ;;
    hs_hat-12mhz)
      firmware_file="mmdvm_hs_hat_fw-12mhz.bin"
      ;;
    hs_dual_hat)
      firmware_file="mmdvm_hs_dual_hat_fw.bin"
      ;;
    hs_dual_hat-12mhz)
      firmware_file="mmdvm_hs_dual_hat_fw-12mhz.bin"
      ;;
    # less common HS_HATs
    hs_hat_ambe)
      firmware_file="d2rg_mmdvm_hs.bin"
      ;;
    hs_hat_generic)
      firmware_file="generic_gpio_fw.bin"
      ;;
    hs_hat_generic_duplex)
      firmware_file="generic_duplex_gpio_fw.bin"
      ;;
    hs_hat_generic_duplex-usb)
      firmware_file="generic_duplex_usb_fw.bin"
      ;;
    # more obscure stuff - not as common anymore
    hs_hat_nano_hotspot)
      firmware_file="nano_hotspot_fw.bin"
      ;;
    nanodv_npi)
      firmware_file="nanodv_npi_fw.bin"
      ;;
    nanodv_usb)
      firmware_file="nanodv_usb_fw.bin"
      ;;
    # vendor HS's
    euronode)
      firmware_file="euronode_pi_fw.bin"
      ;;
    hs_hat_lonestar-usb)
      firmware_file="lonestar_usb_fw.bin"
      ;;
    skybridge)
      firmware_file="skybridge_rpi_fw.bin"
      ;;
    zum_rpi)
      firmware_file="zumspot_rpi_fw.bin"
      ;;
    zum_rpi-duplex)
      firmware_file="zumspot_duplex_fw.bin"
      ;;
    zum_usb)
      firmware_file="zumspot_usb_fw.bin"
      ;;
    zum_libre)
      firmware_file="zumspot_libre_fw.bin"
      ;;
    # MMDVM Pi (G4KLX) rpt. boards, etc.
    mmdvm_pi-f7)
      firmware_file="mmdvm_f7.bin"
      ;;
    mmdvm_pi-f4)
      firmware_file="mmdvm_f4.bin"
      ;;
    list|-l|--list)
      echo "hs_hat"
      echo "hs_hat-12mhz"
      echo "hs_dual_hat"
      echo "hs_dual_hat-12mhz"
      echo "hs_hat_ambe"
      echo "hs_hat_generic"
      echo "hs_hat_generic_duplex"
      echo "hs_hat_generic_duplex-usb"
      echo "hs_hat_nano_hotspot"
      echo "nanodv_npi"
      echo "nanodv_usb"
      echo "hs_hat_lonestar-usb"
      echo "euronode"
      echo "skybridge"
      echo "zum_rpi"
      echo "zum_rpi-duplex"
      echo "zum_usb"
      echo "zum_libre"
      echo "mmdvm_pi-f7"
      echo "mmdvm_pi-f4"
      exit 0
      ;;
    *)
      echo "Your choice of the modem, '${1}', is not supported in this program."
      exit 1
      ;;
  esac
fi

# special handlers/booleans for cetain modem types
if [[ $1 == *usb* ]]; then
  USB_MODEM=true
fi
if [[ $1 == *mmdvm_pi-f* ]]; then
  MMDVM_PI=true
fi

if [ "$(uname -m)" == "aarch64" ]; then
    is_aarch64=true
else
    is_aarch64=false
fi

# gpio front/back compat. for pi5 and older Pi SBCs; since Pi5 has its own GPIO chip (gpiochip4 [pinctrl-rp1])
getGPIOpinMaps=$(ls -al /sys/class/gpio/gpiochip* | sed -n "s/.*gpiochip\([0-9]*\).*/\1/p" | head -n 1)
pin20=$((getGPIOpinMaps + 20))
pin21=$((getGPIOpinMaps + 21))

hardware=$(grep -i hardware /etc/pistar-release | awk -F "= " '{print $2}')
numLogs=$(ls -1rt /var/log/pi-star/MMDVM-*.log | wc -l)
if [[ ${numLogs} -gt 0 ]]; then
    modem_description_line=$(tac $(ls -1rt /var/log/pi-star/MMDVM-*.log) | sed -n 's/description: /&\n/;s/.*\n//p' | head -1)
fi

# setup firmware tmp space
if [ ! -d "/home/pi-star" ] ; then
    clear
    echo ""
    echo -e "${CROSS} ${COL_BRIGHT_RED}ERROR:${COL_NC} WPSD was not imaged nor installed properly; and as a result, it will not be functional. You must re-image WPSD properly, then reinstall."
    echo ""
    exit 1
fi
FW_TMP=/home/pi-star/.wpsd-modem-mgmt
rm -rf $FW_TMP >/dev/null 2>&1
mkdir $FW_TMP 2> /dev/null

#
# Output some useful information when no variables are passed
#
if [ -z "$1" ]
then
  clear
  if [[ "${EXT_CALL}" != "1" ]]; then
      echo -e "${NOTE} ${COL_LIGHT_YELLOW}Note:${COL_NC} No modem specified!"
  fi
  echo ""
  echo "This utility is used to flash/upgrade your hotspot modem/radio."
  echo "To use the command, you need to specify your modem type..."
  echo "Please choose from the list below, and run this command again:"
  echo "--------------------------------------------------------------------------------------------------"
  echo "  Modem Type						Command"
  echo "--------------------------------------------------------------------------------------------------"
  echo "  MMDVM_HS_Hat  (14.7456MHz TCXO) GPIO:			wpsd-modemupgrade hs_hat"
  echo "  MMDVM_HS_Hat  (12.2880MHz TCXO) GPIO:			wpsd-modemupgrade hs_hat-12mhz"
  echo "  MMDVM_HS_Dual_Hat (14.7456MHz TCXO) GPIO:		wpsd-modemupgrade hs_dual_hat"
  echo "  MMDVM_HS_Dual_Hat (12.2880MHz TCXO) GPIO:		wpsd-modemupgrade hs_dual_hat-12mhz"
  echo ""
  echo "  ZUMSpot RPi boards/hotspots GPIO:                     wpsd-modemupgrade zum_rpi"
  echo "  ZUMSpot RPi duplex GPIO board/hotspots:               wpsd-modemupgrade zum_rpi-duplex"
  echo "  ZUMspot USB stick:                                    wpsd-modemupgrade zum_usb"
  echo "  ZUMspot Libre Kit or generic MMDVM_HS board:          wpsd-modemupgrade zum_libre"
  echo ""
  echo "  SkyBridge board/hotspots (14.7456MHz TCXO) GPIO:	wpsd-modemupgrade skybridge"
  echo ""
  echo "  DVMega-EuroNode hotspots (14.7456MHz TCXO) GPIO:	wpsd-modemupgrade euronode"
  echo ""
  echo "  NANO_DV NPi GPIO by BG4TGO:                           wpsd-modemupgrade nanodv_npi"
  echo "  NANO_DV USB by BG4TG:                                 wpsd-modemupgrade nanodb_usb"
  echo ""
  echo "  HS_HAT_AMBE (14.7456MHz TCXO) GPIO:			wpsd-modemupgrade hs_hat_ambe"
  echo "  LoneStar LS MMDVM USB (14.7456MHz TCXO) USB:		wpsd-modemupgrade hs_hat_lonestar-usb"
  echo "  MMDVM_HS_GENERIC (14.7456MHz TCXO) GPIO:		wpsd-modemupgrade hs_hat_generic"
  echo "  MMDVM_HS_GENERIC_DUPLEX (14.7456MHz TCXO) GPIO:	wpsd-modemupgrade hs_hat_generic_duplex"
  echo "  MMDVM_HS_GENERIC_DUPLEX (14.7456MHz TCXO) USB:	wpsd-modemupgrade hs_hat_generic_duplex-usb"
  echo "  Nano_hotSPOT by BI7JTA (14.7456MHz TCXO) GPIO:	wpsd-modemupgrade hs_hat_nano_hotspot"
  echo ""
  echo "  MMDVM Pi F7 Board 460800 baud (12.000MHz TCXO) GPIO:	wpsd-modemupgrade mmdvm_pi-f7"
  echo "  MMDVM Pi F4 Board 460800 baud (12.000MHz TCXO) GPIO:	wpsd-modemupgrade mmdvm_pi-f4"
  echo ""
  echo "--------------------------------------------------------------------------------------------------"
  echo "To DOWNGRADE your Modem firmware to an older version, run: wpsd-modemdowngrade"
  echo "--------------------------------------------------------------------------------------------------"
  echo "IMPORTANT: Please note, that we are not firmware developers, and we offer no support for firmware."
  echo "We simply provide utilities to update the firmware. For actual firmware support, you will need to"
  echo "utilize other support resources from the firmware developers/maintainers or the web".
  echo "--------------------------------------------------------------------------------------------------"
  echo ""

  # Get the friendly name for the chosen Modem according to the dashboard.
  if [ -f '/etc/dstar-radio.mmdvmhost' ]; then
    modemSelected=$(grep 'Hardware=' /etc/dstar-radio.mmdvmhost)
    modemSelected=${modemSelected#*=}

    # Get the user-friendly version of the selected Modem.
    modemSelectedHuman=$(grep value=\"${modemSelected}\" /var/www/dashboard/admin/configure.php | head -n 1)
    modemSelectedHuman=${modemSelectedHuman#*\">}
    modemSelectedHuman=${modemSelectedHuman::-9}

    # Replace "&amp;" with "&" in modemSelectedHuman
    modemSelectedHuman=$(echo "$modemSelectedHuman" | sed 's/&amp;/\&/g')

    echo "Modem selected in Dashboard: ${modemSelectedHuman}"
  fi

  # Get the Modem info from the var
  if [ -n "$modem_description_line" ]; then
    echo "Connected Hardware: $modem_description_line"
      # Get the TCXO data
      if [[ ${modem_description_line} == *"MHz"* ]]; then
        tcxoData=$(echo ${modem_description_line} | awk '{print $3}')
        echo "TCXO Value: ${tcxoData}"
      fi
      echo ""
  fi
  exit 0
fi

#
# OK we know what the modem is, let get the firmware string from the log...
#
if [ -t 1 ]; then # term. only
    clear

    echo -e -n "${COL_LIGHT_CYAN}${BOLD}"
    echo '    _      _____  _______ 
   | | /| / / _ \/ __/ _ \
   | |/ |/ / ___/\ \/ // /
   |__/|__/_/  /___/____/'
    echo -e -n "${COL_NC}${COL_LIGHT_ORANGE}${BOLD}Modem Firmware Update Utility${COL_NC}\n\n"

    if [ -n "$modem_description_line" ]; then
	echo -e "${BULL} Found modem installed:"
	echo "    $modem_description_line"
	echo ""
    fi
fi

#
# Download & flash the latest firmware for the type specified in the arg.
#
if [ "$1" ]
then
  script_name=$(basename "$0")
  UAstr="WPSD Modem FW Update Invocation (client side: $script_name)"

  # get the latest FW version from the git repo API
  API="https://wpsd-swd.w0chp.net/api/v1/repos/WPSD-SWD/MMDVM_HS-Firmware_Latest-Compiled/tags"
  echo -e "${BULL} Retrieving latest available firmware version number from online repository..."
  VERSION=$(curl -L -A "$UAstr" -s ${API} | jq -r 'map(.name | ltrimstr("v") | select(. != "") | split(".") | map(tonumber)) | max_by(.[]) | join(".")') # jq hackery to always return the greatest ver. # from the json "name:" field since the json results are not ordered that way
  # Trim any leading or trailing whitespace from VERSION
  VERSION=$(echo "$VERSION" | tr -d '[:space:]')
  echo -e "    ${INFO} Found latest version: ${COL_LIGHT_BLUE}${BOLD}${VERSION}${COL_NC}"
  echo ""

  if [[ "$NP" != "1" ]]; then
    read -n 1 -s -r -p "Press any key to flash the latest '${1}' firmware version (${VERSION}) to this modem, or 'q' to abort... "
    echo ""
    echo ""

    if [[ "$REPLY" =~ [qQ] ]]; then
      echo ""
      echo "Aborted by user."
      echo ""
      exit 1
    fi
  fi

  BASE_FW_URL="https://wpsd-swd.w0chp.net/WPSD-SWD/MMDVM_HS-Firmware_Latest-Compiled/raw/tag/v${VERSION}/$firmware_file"

  flash_modem() { # the meat!
    local firmware_file="$2"  # Pass the firmware_file as an argument

    echo -e "${BULL} Downloading latest '$1' firmware version ($VERSION)..."

    # Use curl to download the firmware and capture the HTTP status code
    http_status_code=$(curl -s -w "%{http_code}" -o "$FW_TMP/$firmware_file" -A "$UAstr" "$BASE_FW_URL")

    if [[ $http_status_code -ge 200 && $http_status_code -le 399 ]]; then
      cd $FW_TMP
      # Download STM32F10X_Lib (only for binary tools)
      if [ "$MMDVM_PI" = true ]; then # need older ver. for MMDVM-Pi...
	if [ ! -d "./STM32flash-0.7" ] ; then
	  env GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="$UAstr" git clone https://wpsd-swd.w0chp.net/WPSD-SWD/STM32flash-0.7.git &> /dev/null
	fi
      else
	if [ ! -d "./STM32F10X_Lib/utils" ]; then
	  env GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="$UAstr" git clone https://wpsd-swd.w0chp.net/WPSD-SWD/STM32F10X_Lib.git &> /dev/null
	fi
      fi
      echo -e "    ${COL_BRIGHT_GREEN}${TICK} Complete."
    else
      echo -e "    ${CROSS} ${COL_BRIGHT_RED}ERROR:${COL_NC} HTTP $http_status_code. Firmware file does not exist for selected modem and version. Aborting."
      rm -rf $FW_TMP >/dev/null 2>&1
      exit 1
    fi
    sleep 1

    echo -e "\n${BULL} Downloading MD5 checksum file..."
    sleep 1
    curl -L -s -A "$UAstr" -o "$FW_TMP/MD5SUMS.txt" "$BASE_FW_URL/../MD5SUMS.txt"
    echo -e -n "    ${COL_BRIGHT_GREEN}${TICK} Complete."
    echo ""
    sleep 1

    # MD5 checksum validation setup
    calculated_md5=$(md5sum "$FW_TMP/$firmware_file" | awk '{print $1}')
    expected_md5=$(grep "$firmware_file" "$FW_TMP/MD5SUMS.txt" | awk '{print $1}')
    echo -e "\n${BULL} Validating firmware file integrity..."
    sleep 1
    if [ -z "$expected_md5" ]; then # not in file!
        echo -e "    ${CROSS} ${COL_BRIGHT_RED}ERROR:${COL_NC} MD5 checksum value not found for the selected firmware. Aborting."
	rm -rf $FW_TMP >/dev/null 2>&1
        exit 1
    fi

    # Perform MD5 validation
    if [ "$calculated_md5" == "$expected_md5" ]; then
        sleep 1
        echo -e -n "    ${TICK} Passed! File integrity validation succeeded."
        echo ""
        sleep 1
    else
        echo -e "    ${CROSS} ${COL_BRIGHT_RED}ERROR:${COL_NC} File integrity validation failed for the downloaded firmware. Aborting."
	rm -rf $FW_TMP >/dev/null 2>&1
        exit 1
    fi

    # checksum valid; flash!
    echo -e "\n${BULL} Preparing to flash '$1' modem with the latest firmware version ($VERSION)..."
    # Stop MMDVMHost process to free up the serial port
    systemctl stop mmdvmhost.timer >/dev/null 2>&1
    systemctl stop mmdvmhost.service >/dev/null 2>&1

    # NanoPI GPIO handling
    if [[ ${hardware} == "NanoPi" ]]; then
        gpio mode 3 out
        gpio mode 4 out
        gpio write 4 1
        gpio write 3 0
        sleep 1
        gpio write 3 1
    fi

    if [ -t 1 ] && [ "$VERBOSE" != 1 ]; then # term. only
        spinner &
        # Capture the spinner's PID
        SPINNER_PID=$!
    else
	echo -e "\n    ${NOTE}  Flashing modem - please wait..."
    fi

    # Configure vars depending on OS
    if [ $(uname -s) == "Linux" ]; then
	DEV_USB_SER="/dev/ttyACM0"
	if [ $(uname -m) == "x86_64" ]; then
		DFU_RST="./STM32F10X_Lib/utils/linux64/upload-reset"
		DFU_UTIL="./STM32F10X_Lib/utils/linux64/dfu-util"
		ST_FLASH="./STM32F10X_Lib/utils/linux64/st-flash"
		STM32FLASH="./STM32F10X_Lib/utils/linux64/stm32flash"
	elif [ $(uname -m) == "aarch64" ] ; then
		DFU_RST="./STM32F10X_Lib/utils/rpi32/upload-reset"
		DFU_UTIL="./STM32F10X_Lib/utils/rpi32/dfu-util"
		ST_FLASH="./STM32F10X_Lib/utils/rpi32/st-flash"
		STM32FLASH="./STM32F10X_Lib/utils/rpi32/stm32flash"
	elif [ $(uname -m) == "armv7l" ]; then
		DFU_RST="./STM32F10X_Lib/utils/rpi32/upload-reset"
		DFU_UTIL="./STM32F10X_Lib/utils/rpi32/dfu-util"
		ST_FLASH="./STM32F10X_Lib/utils/rpi32/st-flash"
		STM32FLASH="./STM32F10X_Lib/utils/rpi32/stm32flash"
	elif [ $(uname -m) == "armv6l" ]; then
		DFU_RST="./STM32F10X_Lib/utils/rpi32/upload-reset"
		DFU_UTIL="./STM32F10X_Lib/utils/rpi32/dfu-util"
		ST_FLASH="./STM32F10X_Lib/utils/rpi32/st-flash"
		STM32FLASH="./STM32F10X_Lib/utils/rpi32/stm32flash"
	else
		DFU_RST="./STM32F10X_Lib/utils/linux/upload-reset"
		DFU_UTIL="./STM32F10X_Lib/utils/linux/dfu-util"
		ST_FLASH="./STM32F10X_Lib/utils/linux/st-flash"
		STM32FLASH="./STM32F10X_Lib/utils/linux/stm32flash"
	fi
    fi
    if [ $(uname -s) == "Darwin" ]; then
	DEV_USB_SER="/dev/cu.usbmodem14401"
	DFU_RST="./STM32F10X_Lib/utils/macosx/upload-reset"
	DFU_UTIL="./STM32F10X_Lib/utils/macosx/dfu-util"
	ST_FLASH="./STM32F10X_Lib/utils/macosx/st-flash"
	STM32FLASH="./STM32F10X_Lib/utils/macosx/stm32flash"
    fi

    # Arch GPIO handling
    if [[ ${hardware} == "NanoPi" ]]; then
      echo 3 > /sys/class/gpio/export
      echo out > /sys/class/gpio/gpio3/direction
      echo 1 > /sys/class/gpio/gpio3/value
      echo 3 > /sys/class/gpio/unexport
    fi

    # flash handling for USB modems...
    if [ "$USB_MODEM" = true ]; then
	if [ "$VERBOSE" = 1 ] ; then
	    $DFU_RST $DEV_USB_SER 750
	    $DFU_UTIL -D ${firmware_file} -d 1eaf:0003 -a 2 -R -R
	else
	    $DFU_RST $DEV_USB_SER 750 2>&1
	    output=$(eval $DFU_UTIL -D ${firmware_file} -d 1eaf:0003 -a 2 -R -R 2>&1)
	fi
    elif [ "$MMDVM_PI" = true ]; then
	if [ "$VERBOSE" = 1 ] ; then
	    if [ "$is_aarch64" = true ] ; then
		if [ "$OS_VER" -ge "12" ] ; then
		    ./STM32flash-0.7/stm32flash-0.7 -i ${pin20},-${pin21},${pin21}:-${pin20},${pin21} /dev/ttyAMA0 >/dev/null 2>&1
		    ./STM32flash-0.7/stm32flash-0.7 -b 115200 -v -w ${firmware_file} -g 0x0 -R /dev/ttyAMA0
		else
		    ./STM32flash-0.7/stm32flash-0.7-aarch64 -i ${pin20},-${pin21},${pin21}:-${pin20},${pin21} /dev/ttyAMA0 >/dev/null 2>&1
		    ./STM32flash-0.7/stm32flash-0.7-aarch64 -b 115200 -v -w ${firmware_file} -g 0x0 -R /dev/ttyAMA0
		fi
	    else
              ./STM32flash-0.7/stm32flash-0.7 -i ${pin20},-${pin21},${pin21}:-${pin20},${pin21} /dev/ttyAMA0 >/dev/null 2>&1
              ./STM32flash-0.7/stm32flash-0.7 -b 115200 -v -w ${firmware_file} -g 0x0 -R /dev/ttyAMA0
	    fi
	else
	    if [ "$is_aarch64" = true ] ; then
		if [ "$OS_VER" -ge "12" ] ; then 
		    ./STM32flash-0.7/stm32flash-0.7 -i ${pin20},-${pin21},${pin21}:-${pin20},${pin21} /dev/ttyAMA0 >/dev/null 2>&1
		    output=$(eval ./STM32flash-0.7/stm32flash-0.7 -b 115200 -v -w ${firmware_file} -g 0x0 -R /dev/ttyAMA0 2>&1)
		else
		    ./STM32flash-0.7/stm32flash-0.7-aarch64 -i ${pin20},-${pin21},${pin21}:-${pin20},${pin21} /dev/ttyAMA0 >/dev/null 2>&1
		    output=$(eval ./STM32flash-0.7/stm32flash-0.7-aarch64 -b 115200 -v -w ${firmware_file} -g 0x0 -R /dev/ttyAMA0 2>&1)
		fi
	    else
              ./STM32flash-0.7/stm32flash-0.7 -i ${pin20},-${pin21},${pin21}:-${pin20},${pin21} /dev/ttyAMA0 >/dev/null 2>&1
	      output=$(eval ./STM32flash-0.7/stm32flash-0.7 -b 115200 -v -w ${firmware_file} -g 0x0 -R /dev/ttyAMA0 2>&1)
	    fi
	fi
    else  # The rest; flash handling for MMDVM_HS GPIO modems...
	# Upload the firmware to the modem and place output into buffer for fail/success checking logic
	if [ "$VERBOSE" = 1 ] ; then
	    $STM32FLASH -k /dev/ttyAMA0 # try to disable write protection (doesn't always work on some annoying Chinesium locked modems)
	    $STM32FLASH -v -w ${firmware_file} -g 0x0 -R -i ${pin20},-${pin21},${pin21}:-${pin20},${pin21} /dev/ttyAMA0
	else
	    $STM32FLASH -k /dev/ttyAMA0 >/dev/null 2>&1 # try to disable write protection (doesn't always work on some annoying Chinesium locked modems)
	    output=$(eval $STM32FLASH -v -w ${firmware_file} -g 0x0 -R -i ${pin20},-${pin21},${pin21}:-${pin20},${pin21} /dev/ttyAMA0 2>&1)
	fi
    fi

    if [ -t 1 ] && [ "$VERBOSE" != 1 ]; then # term. only
	# Kill the spinner process (make the cursor visible again)
	kill $SPINNER_PID &>/dev/null
    fi

    # did we flash successfully?
    if [ "$VERBOSE" != 1 ] ; then
	flash_successful=false  # Initialize to false
	if [ "$USB_MODEM" = true ]; then # usb dfu successful output
	    if [[ $output == *"state(8) = dfuMANIFEST-WAIT-RESET, status(0) = No error condition is present"* && $output == *"Done!"* ]]; then
		flash_successful=true
	    fi
	else # gpio stm32flash successful output
	    if [[ $output == *"(100.00%) Done"* && $output == *"0x08000000... done"* ]]; then
		flash_successful=true
	    fi
	fi
    fi

    if [ "$VERBOSE" != 1 ] ; then
	if $flash_successful; then
  	    # reset the fw version # in the mmdvmhost logs
  	    sed -i '/MMDVM protocol version: 1, description:/d; /MMDVM protocol version: 2, description:/d' /var/log/pi-star/MMDVM-*.log  >/dev/null 2>&1
  	    # re-nit!
  	    systemctl start mmdvmhost.service >/dev/null 2>&1
  	    systemctl start mmdvmhost.timer >/dev/null 2>&1
  	    rm -rf $FW_TMP >/dev/null 2>&1
  	    echo -e -n "    ${TICK} ${COMPL} Modem firmware flash successful!\n        Modem reinitialized.\n"
  	    echo ""
            echo -e "${INFO} ${COL_LIGHT_YELLOW}Note:${COL_NC} You will need to refresh your dashboard to reflect the updated firmware version.\n"
	else
	    echo -e "    ${CROSS} ${COL_BRIGHT_RED}ERROR:${COL_NC} Modem flashing failed. The serial port was either busy, or the modem is"
	    echo -e "               possibly locked from the vendor. You can try running this command again,"
	    echo -e "               or you can contact the supplier of your modem/hotspot for support.\n"
	    systemctl start mmdvmhost.service >/dev/null 2>&1
	    systemctl start mmdvmhost.timer >/dev/null 2>&1
	    rm -rf $FW_TMP >/dev/null 2>&1
	    echo ""
	fi
    else
 	# reset the fw version # in the mmdvmhost logs
	sed -i '/MMDVM protocol version: 1, description:/d; /MMDVM protocol version: 2, description:/d' /var/log/pi-star/MMDVM-*.log  >/dev/null 2>&1
	# re-nit!
	systemctl start mmdvmhost.service >/dev/null 2>&1
	systemctl start mmdvmhost.timer >/dev/null 2>&1
 	rm -rf $FW_TMP >/dev/null 2>&1
    fi
    exit 0
  }

  if [ -t 1 ]; then
      # run via terminal, only output to screen
      flash_modem "${1}" "${firmware_file}"
    else
      # if not run via terminal, log everything into a log file
      flash_modem "${1}" "${firmware_file}" >> /var/log/pi-star/WPSD-modemflash.log 2>&1
    fi

fi
exit 0

