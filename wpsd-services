#!/bin/bash

##############################
#                            #
#   WPSD Services Handler    #
#                            #
##############################

if [ "$(id -u)" != "0" ]; then
  echo -e "You need to be root to run this command...\n"
  exit 1
fi

source /usr/local/sbin/.wpsd-common-funcs

# Display services active status
function status_services() {
    services=("pistar-watchdog.service" "pistar-upnp.service" "nextiondriver.service" "mmdvmhost.service" "ircddbgateway.service" "dapnetgateway.service" "dmrgateway.service"  "p25gateway.service" "p25parrot.service" "nxdngateway.service" "m17gateway.service" "nxdnparrot.service" "dgidgateway.service" "ysfgateway.service" "ysfparrot.service" "ysf2dmr.service" "ysf2p25.service" "ysf2nxdn.service" "dmr2ysf.service" "dmr2m17.service" "dmr2nxdn.service" "nxdn2dmr.service" "aprsgateway.service" "gpsd.service" "gpsd.socket" "timeserver.service" "cron.service" "pistar-remote.timer" "pistar-remote.service")
    
    for s in "${services[@]}"; do
	status=$(systemctl is-active "$s" | tr [a-z] [A-Z])
	echo "Service $s -> $status"
    done
}

# Start/Stop all the services...
# $1 == FULLSTOP
function stop_services()
{
    echo -ne "Stopping WPSD services..."

    if [ "$1" == "FULLSTOP" ]; then
	    # Prevent cron from restarting services
	    systemctl is-active --quiet cron.service && systemctl stop cron.service
    fi
   
    if [ "$(grep "pistar-upnp.service" /etc/crontab | cut -c 1)" != '#' ]; then
        systemctl stop pistar-upnp.service > /dev/null 2>&1
    fi
    systemctl stop pistar-watchdog.timer > /dev/null 2>&1
    systemctl stop pistar-watchdog.service > /dev/null 2>&1
    /usr/local/sbin/nextion-driver-term > /dev/null 2>&1
    sleep 3
    systemctl stop pistar-remote.timer > /dev/null 2>&1
    systemctl stop pistar-remote.service > /dev/null 2>&1
    systemctl stop mmdvmhost.service > /dev/null 2>&1
    systemctl stop ircddbgateway.service > /dev/null 2>&1
    systemctl stop dapnetgateway.service > /dev/null 2>&1
    systemctl stop p25gateway.service > /dev/null 2>&1
    systemctl stop p25parrot.service > /dev/null 2>&1
    systemctl stop m17gateway.service > /dev/null 2>&1
    systemctl stop nxdngateway.service > /dev/null 2>&1
    systemctl stop nxdnparrot.service > /dev/null 2>&1
    systemctl stop dgidgateway.service > /dev/null 2>&1
    systemctl stop ysfgateway.service > /dev/null 2>&1
    systemctl stop ysfparrot.service > /dev/null 2>&1
    systemctl stop ysf2dmr.service > /dev/null 2>&1
    systemctl stop ysf2p25.service > /dev/null 2>&1
    systemctl stop ysf2nxdn.service > /dev/null 2>&1
    systemctl stop dmr2ysf.service > /dev/null 2>&1
    systemctl stop dmr2nxdn.service > /dev/null 2>&1
    systemctl stop dmr2m17.service > /dev/null 2>&1
    systemctl stop dmrgateway.service > /dev/null 2>&1
    systemctl stop nxdn2dmr.service > /dev/null 2>&1
    systemctl stop aprsgateway.service > /dev/null 2>&1
    systemctl stop gpsd.service > /dev/null 2>&1
    systemctl stop gpsd.socket > /dev/null 2>&1
    systemctl stop timeserver.service > /dev/null 2>&1
    systemctl stop nextiondriver.service > /dev/null 2>&1

    process_log_file

    if [ -t 1 ] ; then
	echo -e "DONE."
    else
	echo -e "* DONE *"
    fi
}

function start_services()
{
    echo -ne "Starting WPSD services..."
    
    systemctl start nextiondriver.service > /dev/null 2>&1
    systemctl start gpsd.socket > /dev/null 2>&1
    systemctl start gpsd.service > /dev/null 2>&1
    systemctl start aprsgateway.service > /dev/null 2>&1
    systemctl start dapnetgateway.service > /dev/null 2>&1
    systemctl start p25gateway.service > /dev/null 2>&1
    systemctl start p25parrot.service > /dev/null 2>&1
    systemctl start nxdngateway.service > /dev/null 2>&1
    systemctl start m17gateway.service > /dev/null 2>&1
    systemctl start nxdnparrot.service > /dev/null 2>&1
    systemctl start ysfparrot.service > /dev/null 2>&1
    systemctl start ysf2dmr.service > /dev/null 2>&1
    systemctl start ysf2p25.service > /dev/null 2>&1
    systemctl start ysf2nxdn.service > /dev/null 2>&1
    systemctl start dmr2ysf.service > /dev/null 2>&1
    systemctl start dmr2nxdn.service > /dev/null 2>&1
    systemctl start dmr2m17.service > /dev/null 2>&1
    systemctl start nxdn2dmr.service > /dev/null 2>&1
    systemctl start timeserver.service > /dev/null 2>&1
    systemctl start mmdvmhost.service > /dev/null 2>&1
    systemctl start dmrgateway.service > /dev/null 2>&1
    systemctl start ysfgateway.service > /dev/null 2>&1
    systemctl start pistar-watchdog.service > /dev/null 2>&1
    systemctl start pistar-watchdog.timer > /dev/null 2>&1
    systemctl start pistar-remote.service > /dev/null 2>&1
    systemctl start pistar-remote.timer > /dev/null 2>&1
    if [ "$(grep "pistar-upnp.service" /etc/crontab | cut -c 1)" != '#' ]; then
        systemctl start pistar-upnp.service > /dev/null 2>&1
    fi
    # dvmega cast-specific stuff
    if [ "$castResult" == "true" ]; then
	/usr/local/cast/sbin/RSET.sh  > /dev/null 2>&1
    fi
    
    # Restart cron service if fullstop was passed
    systemctl is-active --quiet cron.service || systemctl start cron.service

    if [ -t 1 ] ; then
	echo -e "\b\b\b: DONE.\b"
    else
	echo -e "* DONE *"
    fi
}

case "$1" in
    start)
        start_services
        ;;
    
    stop)
        stop_services
        ;;
    
    fullstop)
        stop_services "FULLSTOP"
        ;;
    
    status)
	status_services
	;;
    
    restart)
        stop_services
        start_services
        ;;
    
    *)
        echo -e "`basename $0` {start|stop|fullstop|restart}\n"
        exit 1
        ;;
esac

exit 0
