#!/bin/bash
#
###############################################################################
#                                                                             #
#                           WPSD Update Program                               #
#                                 by W0CHP                                    #
#                                                                             #
###############################################################################
#

if [ "$(id -u)" != "0" ]; then
  echo -e "You need to be root to run this command...\n"
  exit 1
fi

exec 200>/var/lock/wpsd-update.lock || exit 1
if ! flock -n 200 ; then
  echo -e "Another instance is already running...\n"
  exit 1
fi

script_name=$(basename "$0")

source /usr/local/sbin/.wpsd-common-funcs

mount -o remount,rw / # for shits and giggles

# connectivity check
conn_check() {
    echo -e "\n${BULL} Checking connectivity to the WPSD Update System..."
    status_code=$(curl -m 30 -A "ConnCheck WPSD-Update (Manual-Update) ${uaStr}" --write-out %{http_code} --silent --output /dev/null "${CONN_CHECK_URI}")
    sleep 1
    if [[ $status_code == 20* ]] || [[ $status_code == 30* ]] ; then
	echo -e "  ${COL_BRIGHT_GREEN}${TICK} Connection established!\n"
    else
	echo -e "  ${CROSS} ${COL_BRIGHT_RED}ERROR:${COL_NC} Cannot connect to the WPSD Update System. Try again later. Exiting...\n"
	exit 1
    fi
}

git_checkUpdateRequired() {
    # Set the function variables
    gitFolder=${1}
    gitRemoteURL=$(git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git config --get remote.origin.url)
    # WPSD has more than one branch. So depending on what W0CHP branch the user has installed, check that branch.
    gitBranch="$( git --git-dir=${gitFolder}/.git symbolic-ref --short HEAD )"

    # Git check / update function
    gitStatusRemote=$(env GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="WPSD-UpdateCheck (Manual-Update) Ver.# ${dashVer} (${gitBranch}) Call:${CALL} UUID:${uuidStr} [${hwDeetz}] [${osName}]" git ls-remote --heads ${gitRemoteURL} | grep ${gitBranch} | awk {'print $1'})
    gitStatusLocal=$(git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git log ${gitBranch} --pretty=tformat:"%H" -1)

    # Return the output
    if [[ ${gitStatusRemote} != ${gitStatusLocal} ]]; then
	echo "1"
    else
	echo "0"
    fi
}

git_update() {
    # Set the function variables
    gitFolder=${1}
    # get proper WPSD dash branch user is running...
    dash_branch="$( git --git-dir=${gitFolder}/.git symbolic-ref --short HEAD )"

    # # get rid of legacy index not that upnp rules are in /etc/wpsd-upnp-rules
    if [[ ${gitFolder} == "/usr/local/sbin" ]]; then
	git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git update-index --no-assume-unchanged pistar-upnp.service > /dev/null 2>&1
    fi

    if [[ $(git_checkUpdateRequired ${gitFolder}) -gt 0 ]]; then
        echo -e "  ${COL_LIGHT_MAGENTA}${INFO} Updates found - Installing now..."
        # WPSD has more than one branch. So depending on what W0CHP branch the user has installed, pull that branch.
        if [[ ${gitFolder} == "/var/www/dashboard" ]]; then
	    cd ${gitFolder}
	    git stash > /dev/null 2>&1 # save user config files: config/config.php config/ircddblocal.php config/language.php
	    env GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="WPSD-Update (Manual-Update) Ver.# ${dashVer} (${gitBranch}) Call:${CALL} UUID:${uuidStr} [${hwDeetz}] [${osName}]" git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git pull -q origin ${dash_branch} > /dev/null 2>&1
	    git checkout stash@{0} -- config/config.php config/ircddblocal.php config/language.php > /dev/null 2>&1 # restore user config files from stash
	    git stash clear > /dev/null 2>&1 # housekeeping
	    echo -e "  ${TICK} Updates installed!"
	else
	    if [[ ${gitFolder} == "/usr/local/sbin" ]]; then
		cd ${gitFolder}
		env GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="WPSD-Update (Manual-Update) Ver.# ${dashVer} (${gitBranch}) Call:${CALL} UUID:${uuidStr} [${hwDeetz}] [${osName}]" git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git fetch > /dev/null 2>&1
		if [ "$(git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git diff --name-only origin/master 2>/dev/null | grep wpsd-update 2>/dev/null)" = "wpsd-update" ]; then
		    # New updater version - Self-update and re-exec:
		    echo -e "\n  ${COL_LIGHT_BLUE}${INFO} New version of the Updater available. Performing self-update..."
		    env GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="WPSD-Update (Manual-Update) Ver.# ${dashVer} (${gitBranch}) Call:${CALL} UUID:${uuidStr} [${hwDeetz}] [${osName}]" git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git pull -q origin master > /dev/null 2>&1
		    echo -e "  ${TICK} Updates installed!"
		    if [[ $(git_checkUpdateRequired ${gitFolder}) -gt 0 ]]; then
			echo -e "  ${NOTE} Forcing update..."
			if [ -f ${gitFolder}/pistar-upnp.service ]; then
			    rm -f ${gitFolder}/pistar-upnp.service
			fi
			env GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="WPSD-Update (Manual-Update) Ver.# ${dashVer} (${gitBranch}) Call:${CALL} UUID:${uuidStr} [${hwDeetz}] [${osName}]" git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git reset --hard origin/master
			env GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="WPSD-Update (Manual-Update) Ver.# ${dashVer} (${gitBranch}) Call:${CALL} UUID:${uuidStr} [${hwDeetz}] [${osName}]" git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git pull -q origin master > /dev/null 2>&1
		    fi
		    echo -e "\n  ${COL_LIGHT_BLUE}${INFO} Relaunching Updater with the new version in 3 seconds..."
		    sleep 4
		    exec "$0" "$@"
		    exit 1
		fi
	    fi
            if [[ ${gitFolder} == "/opt/cast" ]]; then # dvmega cast logic
                env GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="WPSD-Update (Manual-Update) Ver.# ${dashVer} (${gitBranch}) Call:${CALL} UUID:${uuidStr} [${hwDeetz}] [${osName}]" git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git reset --hard origin/master > /dev/null 2>&1
                env GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="WPSD-Update (Manual-Update) Ver.# ${dashVer} (${gitBranch}) Call:${CALL} UUID:${uuidStr} [${hwDeetz}] [${osName}]" git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git pull -q origin master > /dev/null 2>&1
                env GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="WPSD-Update (Manual-Update) Ver.# ${dashVer} (${gitBranch}) Call:${CALL} UUID:${uuidStr} [${hwDeetz}] [${osName}]" git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git reset --hard origin/master > /dev/null 2>&1
	    fi
	    if [[ ${gitFolder} == "/usr/local/bin" ]]; then
		# Update the Binaries
		env GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="WPSD-Update (Manual-Update) Ver.# ${dashVer} (${gitBranch}) Call:${CALL} UUID:${uuidStr} [${hwDeetz}] [${osName}]" git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git pull -q origin master > /dev/null 2>&1
		env GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="WPSD-Update (Manual-Update) Ver.# ${dashVer} (${gitBranch}) Call:${CALL} UUID:${uuidStr} [${hwDeetz}] [${osName}]" git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git reset --hard origin/master > /dev/null 2>&1
	    fi
	    echo -e "  ${TICK} Updates installed!"
        fi
	# Re-check that the updates are now good
	if [[ $(git_checkUpdateRequired ${gitFolder}) -gt 0 ]]; then
	    if [[ ${gitFolder} == "/usr/local/sbin" ]]; then
		rm -rf ${gitFolder}/pistar-upnp.service
	    fi
	    # Updates were not successful, reverting to original files...
	    # WPSD has more than one branch. So depending on what W0CHP branch the user has installed, pull that branch.
	    if [[ ${gitFolder} == "/var/www/dashboard" ]]; then
		env GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="WPSD-Update (Manual-Update) Ver.# ${dashVer} (${gitBranch}) Call:${CALL} UUID:${uuidStr} [${hwDeetz}] [${osName}]" git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git reset --hard origin/${dash_branch}
	    else
		env GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="WPSD-Update (Manual-Update) Ver.# ${dashVer} (${gitBranch}) Call:${CALL} UUID:${uuidStr} [${hwDeetz}] [${osName}]" git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git reset --hard origin/master
	    fi
	fi
    else
	echo -e "  ${INFO} No updates required."
    fi
}

term_banner() {
    clear
    echo -e -n "${COL_LIGHT_CYAN}${BOLD}"
    echo '    _      _____  _______ 
   | | /| / / _ \/ __/ _ \
   | |/ |/ / ___/\ \/ // /
   |__/|__/_/  /___/____/'
    echo -e -n "${COL_NC}${COL_LIGHT_ORANGE}${BOLD}WPSD Software Update Utility${COL_NC}\n"
}

perform_update() {
    systemctl stop cron.service > /dev/null 2<&1
    pkill pistar-hourly.cron > /dev/null 2>&1
    pkill pistar-daily.cron > /dev/null 2>&1
    pkill .wpsd-slipstream-tasks > /dev/null 2>&1

    if [ -t 1 ] ; then
	if ! [ $(cat /lib/systemd/system/nginx.service | grep -o "mkdir") ]; then
	    sed -i '\/PIDFile=\/run\/nginx.pid/a ExecStartPre=\/bin\/mkdir -p \/var\/log\/nginx' /lib/systemd/system/nginx.service
	    systemctl daemon-reload
	    systemctl restart nginx.service
	    echo -e "  ${NOTE} ${COL_LIGHT_YELLOW}Note:${COL_NC} Web server configuration has been updated by operating system; restarting update..."
	    exec "$0" "$@"
	    exit 1
	fi
    fi

    conn_check
    echo -e "${BULL} Stopping WPSD Services. Please wait..."
    wpsd-services fullstop > /dev/null 2>&1
    process_log_file > /dev/null 2>&1
    echo -e "  ${TICK} Done!\n"

    echo -e "${BULL} Updating WPSD Utilities and Support Programs..."
    git_update /usr/local/sbin
    #systemctl daemon-reload > /dev/null 2>&1
    echo ""

    echo -e "${BULL} Updating WPSD Web Dashboard Software..."
    git_update /var/www/dashboard
    echo ""

    echo -e "${BULL} Updating WPSD Digital Voice-Related Binaries..."
    git_update /usr/local/bin
    echo ""

    # dvmega cast-specific stuff
    castResult=$(isDVmegaCast)
    if [ "$castResult" == "true" ]; then
	echo -e "${BULL} Updating WPSD DVMega CAST Software..."
	# setup local cast repo and link repo to cast PATH
	if [ ! -d '/opt/cast' ] ; then
	   cd /usr/local/sbin
	   git reset --hard > /dev/null 2>&1

	   systemctl stop castudp.service > /dev/null 2>&1
	   systemctl stop castserial.service > /dev/null 2>&1

	   git clone https://wpsd-swd.w0chp.net/WPSD-SWD/DVMega-Cast.git /opt/cast > /dev/null 2>&1
	   cd /opt/cast
	   git checkout master > /dev/null 2>&1
	   git reset --hard origin/master > /dev/null 2>&1

	   rm -rf /usr/local/cast/sbin
	   ln -s /opt/cast/usr-local-cast-sbin /usr/local/cast/sbin > /dev/null 2>&1

	   rm -rf /usr/local/cast/bin
	   ln -s /opt/cast/usr-local-cast-bin /usr/local/cast/bin > /dev/null 2>&1

	   systemctl start castudp.service > /dev/null 2>&1
	   systemctl start castserial.service > /dev/null 2>&1

	   mkdir /usr/local/cast/etc > /dev/null 2>&1
	   cp -a /opt/cast/cast-factory-settings/* /usr/local/cast/etc/ > /dev/null 2>&1
	fi
	if [ -d '/opt/cast' ] ; then
	    # setup the memory-list and firmware upgrade www symlinks if they don't exist yet.
	    if [ ! -L '/var/www/dashboard/admin/cast' ] && [ ! -d '/var/www/dashboard/admin/cast' ]; then
		ln -s /opt/cast/usr-local-cast-www /var/www/dashboard/admin/cast > /dev/null 2>&1
	    fi
	    # setup central fw upload dir.
	    if [ ! -d '/opt/cast/usr-local-cast-www/cast-firmware/fw' ]; then
		mkdir /opt/cast/usr-local-cast-www/cast-firmware/fw
	    fi
	fi
	# ensure configs always have proper perms
	chmod 775 /usr/local/cast/etc
	chown -R www-data:pi-star /usr/local/cast/etc
	chmod 664 /usr/local/cast/etc/*

	# www is a symlink so get main perms setup
	chmod 775 /opt/cast/usr-local-cast-www
	chmod 775 /opt/cast/usr-local-cast-www/cast-firmware/fw
	chown -R www-data:www-data /opt/cast/usr-local-cast-www

	git_update /opt/cast
	echo ""
    fi

    if ! [ -f /root/M17Hosts.txt ]; then
	echo -e "# Format: Reflector Name IP Port\n# Example:\n# M17-000    81.231.241.25    17000\n\n" > /root/M17Hosts.txt
    fi
    echo -e "${BULL} Updating Hostfiles, User ID DB's & Talkgroup Lists..."
    /usr/local/sbin/wpsd-hostfile-update > /dev/null 2>&1
    echo -e "  ${TICK} Done!\n"

    echo -e "${BULL} Performing maintenance tasks..."

    # check if user already has firewall disabled, and if so, ensure it's kept that way.
    if ! grep -q LOGNDROP /etc/iptables.rules ; then
	/usr/local/sbin/wpsd-system-manager -dfw > /dev/null 2>&1
    else
	/usr/local/sbin/wpsd-system-manager -efw > /dev/null 2>&1
    fi

    /usr/local/sbin/.wpsd-backend-maint > /dev/null 2>&1

    # setup our own native NextionDriver service...
    # Updated 2/23/2023 - W0CHP:
    # TGIFspots contain really weird hacks/scripts, etc.[1] for their Nextion
    # screens, and it all collides with WPSD and our native Nextion driver
    # support.  So lets ignore TGIFspots altogether.
    # [1] <https://github.com/EA7KDO/Scripts>
    if [ -f '/etc/cron.daily/getstripped' ] || [ -d '/usr/local/etc/Nextion_Support/' ] || [ -d '/Nextion' ] || grep -q 'SendUserDataMask=0b00011110' /etc/mmdvmhost ; then # these are hacks that seem to exist on TGIFspots.
	:
    else # yay no tgifspot hacks!
	if [ ! -f '/lib/systemd/system/nextiondriver.service' ] ; then # lets get a native service placeholder installed at the very least
	    curl -Ls -A "${uaStrSF}" $SUPPORTING_FILES_REPO/mmdvmhost.service-W0CHP  -o /lib/systemd/system/mmdvmhost.service
	    curl -Ls -A "${uaStrSF}" $SUPPORTING_FILES_REPO/nextiondriver.service-W0CHP  -o /lib/systemd/system/nextiondriver.service
	    # Enable the NextionDriver service
	    systemctl daemon-reload > /dev/null 2<&1
	    systemctl stop nextiondriver.service > /dev/null 2<&1
	    /usr/bin/killall NextionDriver > /dev/null 2<&1
	    systemctl enable nextiondriver.service > /dev/null 2<&1
	fi
	if [ -f '/lib/systemd/system/nextiondriver.service' ] ; then # for non-Nextion instances, ensure existing service is ours vs. ON7LDS'
	    if systemctl status nextiondriver.service | grep masked > /dev/null 2<&1 ; then
		systemctl unmask nextiondriver.service > /dev/null 2<&1
		systemctl daemon-reload > /dev/null 2<&1
	    fi
	    if [ "`sed -nr "/^\[General\]/,/^\[/{ :l /^\s*[^#].*/ p; n; /^\[/ q; b l; }" /etc/mmdvmhost | grep "Display" | cut -d= -f 2`" != "Nextion" ]; then
		if grep -qo 'killall' /lib/systemd/system/nextiondriver.service ; then
		    curl -Ls -A "${uaStrSF}" $SUPPORTING_FILES_REPO/mmdvmhost.service-W0CHP  -o /lib/systemd/system/mmdvmhost.service
		    curl -Ls -A "${uaStrSF}" $SUPPORTING_FILES_REPO/nextiondriver.service-W0CHP  -o /lib/systemd/system/nextiondriver.service
		    systemctl daemon-reload > /dev/null 2<&1
		    systemctl stop nextiondriver.service > /dev/null 2<&1
		    /usr/bin/killall NextionDriver > /dev/null 2<&1
		    systemctl enable nextiondriver.service > /dev/null 2<&1
		fi
	    fi
	fi
	# now, disable nextion driver stuff if display != Nextion in mmdvmhost config...
	if [ "`sed -nr "/^\[General\]/,/^\[/{ :l /^\s*[^#].*/ p; n; /^\[/ q; b l; }" /etc/mmdvmhost | grep "Display" | cut -d= -f 2`" != "Nextion" ]; then
	    if grep -qo 'Requires=nextiondriver.service' /lib/systemd/system/mmdvmhost.service ; then # if nextion is re'q, get rid of it
		sed -i '/Requires=nextiondriver.service/d' /lib/systemd/system/mmdvmhost.service
		systemctl daemon-reload > /dev/null 2<&1
	    fi
	    if grep -qo 'RequiredBy=mmdvmhost.service' /lib/systemd/system/nextiondriver.service ; then # if mmdvmhost is re'q, get rid of it
		sed -i '/RequiredBy=mmdvmhost.service/d' /lib/systemd/system/nextiondriver.service
		    systemctl daemon-reload > /dev/null 2<&1
	    fi
	    # stop and disable
	    if ! systemctl status nextiondriver.service | grep 'disabled;' > /dev/null 2<&1 ; then
		systemctl stop nextiondriver.service > /dev/null 2<&1
		/usr/bin/killall NextionDriver > /dev/null 2<&1
		systemctl disable nextiondriver.service > /dev/null 2<&1
		systemctl daemon-reload > /dev/null 2<&1
	    fi
	fi
	# user has Nextion defined in mmdvmhost, so let's natively support it:
	if [ "`sed -nr "/^\[General\]/,/^\[/{ :l /^\s*[^#].*/ p; n; /^\[/ q; b l; }" /etc/mmdvmhost | grep "Display" | cut -d= -f 2`" = "Nextion" ]; then
	    if grep -qo 'killall' /lib/systemd/system/nextiondriver.service ; then # our native support has not been installed/config'd, user likely using ON7LDS script - init!
		systemctl stop nextiondriver.service > /dev/null 2<&1
		/usr/bin/killall NextionDriver > /dev/null 2<&1
		curl -Ls -A "${uaStrSF}" $SUPPORTING_FILES_REPO/mmdvmhost.service-W0CHP  -o /lib/systemd/system/mmdvmhost.service
		curl -Ls -A "${uaStrSF}" $SUPPORTING_FILES_REPO/nextiondriver.service-W0CHP  -o /lib/systemd/system/nextiondriver.service
		systemctl daemon-reload > /dev/null 2<&1
		systemctl enable nextiondriver.service > /dev/null 2<&1
		systemctl restart nextiondriver.service > /dev/null 2<&1
		systemctl restart mmdvmhost.service > /dev/null 2<&1
	    fi
	fi
    fi

    # m17 service installer bugfix:
    if [ ! -f "/etc/systemd/system/m17gateway.service" ] ; then
	/usr/local/sbin/m17gateway.service install > /dev/null 2<&1
	systemctl daemon-reload > /dev/null 2<&1
    fi

    # add CallLookupProvider to /etc/pistar-release if not there...
    if ! grep -q 'CallLookupProvider =' /etc/pistar-release ; then
	sed -i '/ConfUpdReqd/a CallLookupProvider = QRZ' /etc/pistar-release
    fi

    # if css does not exist, install default one
    if [ ! -f "/etc/pistar-css.ini" ] ; then
	curl -Ls -A "${uaStrSF}" $SUPPORTING_FILES_REPO/pistar-css-W0CHP.ini -o /etc/pistar-css.ini
    fi

    # Fix up new P25Gateway Config Hostfile setup
    if [ ! -f /root/P25Hosts.txt ]; then
	touch /root/P25Hosts.txt
    fi

    # Fix up new NXDNGateway Config Hostfile setup
    if [ ! -f /root/NXDNHosts.txt ]; then
	touch /root/NXDNHosts.txt
    fi
    if [ ! -f /usr/local/etc/NXDNHostsLocal.txt ]; then
	touch /usr/local/etc/NXDNHostsLocal.txt
    fi

    # Download M17 Audio files if missing
    if [[ ! -d /usr/local/etc/M17_Audio ]]; then
	mkdir -p /usr/local/etc/M17_Audio/
	curl --fail -o /usr/local/etc/M17_Audio/de_DE.m17 -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/de_DE.m17
	curl --fail -o /usr/local/etc/M17_Audio/de_DE.indx -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/de_DE.indx
	curl --fail -o /usr/local/etc/M17_Audio/dk_DK.m17 -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/dk_DK.m17
	curl --fail -o /usr/local/etc/M17_Audio/dk_DK.indx -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/dk_DK.indx
	curl --fail -o /usr/local/etc/M17_Audio/en_GB.m17 -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/en_GB.m17
	curl --fail -o /usr/local/etc/M17_Audio/en_GB.indx -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/en_GB.indx
	curl --fail -o /usr/local/etc/M17_Audio/en_US.m17 -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/en_US.m17
	curl --fail -o /usr/local/etc/M17_Audio/en_US.indx -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/en_US.indx
	curl --fail -o /usr/local/etc/M17_Audio/es_ES.m17 -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/es_ES.m17
	curl --fail -o /usr/local/etc/M17_Audio/es_ES.indx -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/es_ES.indx
	curl --fail -o /usr/local/etc/M17_Audio/fr_FR.m17 -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/fr_FR.m17
	curl --fail -o /usr/local/etc/M17_Audio/fr_FR.indx -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/fr_FR.indx
	curl --fail -o /usr/local/etc/M17_Audio/it_IT.m17 -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/it_IT.m17
	curl --fail -o /usr/local/etc/M17_Audio/it_IT.indx -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/it_IT.indx
	curl --fail -o /usr/local/etc/M17_Audio/pl_PL.m17 -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/pl_PL.m17
	curl --fail -o /usr/local/etc/M17_Audio/pl_PL.indx -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/pl_PL.indx
	curl --fail -o /usr/local/etc/M17_Audio/se_SE.m17 -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/se_SE.m17
	curl --fail -o /usr/local/etc/M17_Audio/se_SE.indx -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/se_SE.indx    
    fi

    # Add Portuguese voice files for DMRGateway and ircDDBGw if missing
    if [[ ! -f /usr/local/etc/DMR_Audio/pt_PT.ambe ]]; then
	curl --fail -o /usr/local/etc/DMR_Audio/pt_PT.ambe -s https://raw.githubusercontent.com/g4klx/DMRGateway/master/Audio/pt_PT.ambe
	curl --fail -o /usr/local/etc/DMR_Audio/pt_PT.indx -s https://raw.githubusercontent.com/g4klx/DMRGateway/master/Audio/pt_PT.indx
	chmod 664 /usr/local/etc/DMR_Audio/*.ambe
	chmod 664 /usr/local/etc/DMR_Audio/*.indx
    fi
    if [[ ! -f /usr/local/etc/ircddbgateway/pt_PT.ambe ]]; then
	curl --fail -o /usr/local/etc/ircddbgateway/pt_PT.ambe -s https://raw.githubusercontent.com/g4klx/ircDDBGateway/master/Data/pt_PT.ambe
	curl --fail -o /usr/local/etc/ircddbgateway/pt_PT.indx -s https://raw.githubusercontent.com/g4klx/ircDDBGateway/master/Data/pt_PT.indx
	curl --fail -o /usr/local/etc/ircddbgateway/TIME_pt_PT.ambe -s https://raw.githubusercontent.com/g4klx/ircDDBGateway/master/Data/TIME_pt_PT.ambe
	curl --fail -o /usr/local/etc/ircddbgateway/TIME_pt_PT.indx -s https://raw.githubusercontent.com/g4klx/ircDDBGateway/master/Data/TIME_pt_PT.indx
	chmod 664 /usr/local/etc/ircddbgateway/*.ambe
	chmod 664 /usr/local/etc/ircddbgateway/*.indx
    fi

    # should likely do more AMBE voice file existence checks here at some point.

    if [[ $(grep "\[Voice\]" /etc/p25gateway | wc -l) -eq 0 ]]; then # ensure p25gw is setup for voice supp.
	echo "" >> /etc/p25gateway
	sed -i '$a[Voice]\nEnabled=1\nLanguage=en_GB\nDirectory=/usr/local/etc/P25_Audio\n' /etc/p25gateway
    fi

    if ! grep -q TIME_FORMAT /var/www/dashboard/config/config.php ; then # insert req'd constant if not found. WIll be stashed on next update :-)
	sed -i "/^date_default_timezone_set.*/i define('TIME_FORMAT', '24');" /var/www/dashboard/config/config.php
    fi

    if ! grep -q AUTO_UPDATE_CHECK /var/www/dashboard/config/config.php ; then # insert req'd constant if not found. WIll be stashed on next update :-)
	sed -i "/^date_default_timezone_set.*/i define('AUTO_UPDATE_CHECK', 'true');" /var/www/dashboard/config/config.php
    fi

    # Get and cache latest W0CHP-PiStar-Dash version from remote Git repo:
    gitFolder="/var/www/dashboard"
    gitRemoteURL=$(git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git config --get remote.origin.url)
    gitBranch="$( git --git-dir=${gitFolder}/.git symbolic-ref --short HEAD )"
    gitStatusRemote=$(env GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="WPSD-Update Version Cacher (Manual-Update) Ver.# ${dashVer} (${gitBranch}) Call:${CALL} UUID:${uuidStr} [${hwDeetz}] [${osName}]" git ls-remote --heads ${gitRemoteURL} ${gitBranch} | grep ${gitBranch} | awk {'print $1'} | awk '{ print substr($1,1,10) }') # last pipe to awk: converts long hash to 10 chars.
    echo ${gitStatusRemote} > /etc/.WPSD_remote_version

    # log file perms
    chown -R mmdvm:mmdvm /var/log/pi-star > /dev/null 2>&1
    chmod 775 /var/log/pi-star > /dev/null 2>&1

    # run any slipstream tasks
    bash /usr/local/sbin/.wpsd-slipstream-tasks > /dev/null 2>&1

    echo -e "  ${TICK} Done!" # maint. complete

    echo -e "\n${BULL} Starting WPSD Services. Please wait..."
    wpsd-services start > /dev/null 2>&1
    echo -e "  ${TICK} Done!\n"


    if [ -t 1 ]; then
    # This is running from a terminal, so it should be safe to update the OS
	if [ "$1" == "os" ]; then
	    echo -e "${BULL} Checking for any available operating system updates."
	    echo -e "  Please wait..."
	    apt-get -q=2 update
	    if ! apt-get upgrade --dry-run | grep -qw "0 upgraded"; then
		echo -e "  ${COL_LIGHT_MAGENTA}${INFO} Operating system updates available; installing now..."
		apt-get upgrade --fix-missing --fix-broken -y
		apt-get -q=2 autoremove -y
		apt-get -q=2 clean
		apt-get -q=2 autoclean
		echo -e "  ${TICK} Done!\n"
	    else
		echo -e "  ${INFO} No operating system updates required.\n"
	    fi
	else
	    echo -e "${BULL} ${COL_LIGHT_BLUE}${INFO} Operating system is ${BOLD}not${COL_NC} updated by default..."
	    echo -e "      To check for and install OS updates, run this"
	    echo -e "      program again as: '${COL_LIGHT_BLUE}${BOLD}sudo wpsd-update os${COL_NC}'\n"
	fi
    fi

    /bin/sync
    /bin/sync
    /bin/sync

    if [ -t 1 ]; then # term. vs. web output...
	echo -e "${COL_REG_CYAN}+-------------------------------------------+${COL_NC}"
	echo -e "${COL_REG_CYAN}|                                           |${COL_NC}"
	echo -e "${COL_REG_CYAN}|  ${TICK} ${COMPL} Update Process Finished!   ${COL_REG_CYAN}|${COL_NC}"
	echo -e "${COL_REG_CYAN}|                                           |${COL_NC}"
	echo -e "${COL_REG_CYAN}+-------------------------------------------+${COL_NC}\n"
    else
	echo -e "${TICK} ${COMPL} Update Process Finished!"
	#echo -e "<b>(<a style='color:white;text-decoration:underline;'' href='/config/changelog.php'>Changelog</a>)</b>"
	echo -e "<h3><a style='color:white;text-decoration:underline;'' href='/'>Back to Dashboard <span style='font-size: 30px;'>&larr;</span></a></h3>"
    fi
}

# Do the deeds, y0!
if [ -t 1 ]; then
    # run via terminal, only output to screen
    export FORCE_COLOR=1
    term_banner
    perform_update "$@"
else
    # if not run via terminal, log everything into a log file
     perform_update >> /var/log/pi-star/WPSD-update.log 2>&1
fi

exit 0

