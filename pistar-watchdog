#!/usr/bin/python

###########################################################################
#                                                                         #
#                         WPSD Service Watchdog                           #
#                                                                         #
#                       Refactored for Py3 - W0CHP                        #
#                                                                         #
###########################################################################

import subprocess
import time
import os
import linecache
import datetime
import configparser

time.sleep(90) #Assumiing the host has just started up, let the services settle...

# Get the disk usage
def disk_stat(path):
    disk = os.statvfs(path)
    percent = (disk.f_blocks - disk.f_bfree) * 100 / (disk.f_blocks -disk.f_bfree + disk.f_bavail) + 1
    return percent

while True: #Main loop
	# Get the current status
	mmdvmhost = "/etc/dstar-radio.mmdvmhost"
	utcnow = datetime.datetime.utcnow()
	datenow = utcnow.strftime('%Y-%m-%d')
	mmdvmLog = '/var/log/pi-star/MMDVM-' + datenow + '.log'

	# Check the disk usage
	if disk_stat('/var/log') > 90:
		# Clean up the log volume
		os.system('rm -rf /var/log/*.1.gz')
		os.system('rm -rf /var/log/*.1')
		os.system('rm -f $(find /var/log/pi-star/*.log -type f -mtime +2 -print)')
		os.system('rm -f $(find /var/log/ -type f -mtime +0 -print | grep .gz)')
		# Shorten the Pi-Star logs
		if os.path.isfile(mmdvmhost):
			if os.path.isfile(mmdvmLog):
				os.system('echo "$(tail -1500 /var/log/pi-star/MMDVM-$(date +%F).log)" > /var/log/pi-star/MMDVM-$(date +%F).log')
			os.system('/bin/systemctl restart mmdvmhost.service')
			time.sleep(60) # Give the service 60 secs before we re-test

	# Check the MMDVMHost Specific Services
	if os.path.isfile(mmdvmhost):
		# first, let's ensure the mmdvmhost startup script is NOT running...
		check_mmdvmhost_service = subprocess.Popen('pgrep -f "/usr/local/sbin/mmdvmhost.service"', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
		if len(check_mmdvmhost_service.stdout.readlines()) > 1:  # Check for more than one line of output
			print("/usr/local/sbin/mmdvmhost.service is already running, skipping restart.")
		else: #  mmdvmhost startup script is NOT running - continue...
			checkprocmmdvm = subprocess.Popen('pgrep' + ' MMDVMHost', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
			if not checkprocmmdvm.stdout.readlines():
				os.system('/bin/systemctl stop mmdvmhost.service')
				time.sleep(2) #Give the service time to stop before we move on
				os.system('/bin/systemctl start mmdvmhost.service')
				time.sleep(10) #Give the service time to start before we move on
				checkprocmmdvm.wait()
		
		checkprocdmrgateway = subprocess.Popen('pgrep' + ' DMRGateway', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
		if not checkprocdmrgateway.stdout.readlines():
			os.system('/bin/systemctl stop dmrgateway.service')
			time.sleep(2) #Give the service time to stop before we move on
			os.system('/bin/systemctl start dmrgateway.service')
			time.sleep(10) #Give the service time to start before we move on
		checkprocdmrgateway.wait()

		checkprocysfgateway = subprocess.Popen('pgrep' + ' YSFGateway', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
		if not checkprocysfgateway.stdout.readlines():
			os.system('/bin/systemctl stop ysfgateway.service')
			time.sleep(2) #Give the service time to stop before we move on
			os.system('/bin/systemctl start ysfgateway.service')
			time.sleep(10) #Give the service time to start before we move on
		checkprocysfgateway.wait()

		checkprocdgidgateway = subprocess.Popen('pgrep' + ' DGIdGateway', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
		if not checkprocdgidgateway.stdout.readlines():
			os.system('/bin/systemctl stop dgidgateway.service')
			time.sleep(2) #Give the service time to stop before we move on
			os.system('/bin/systemctl start dgidgateway.service')
			time.sleep(10) #Give the service time to start before we move on
		checkprocdgidgateway.wait()

		checkprocp25gateway = subprocess.Popen('pgrep' + ' P25Gateway', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
		if not checkprocp25gateway.stdout.readlines():
			os.system('/bin/systemctl stop p25gateway.service')
			time.sleep(2) #Give the service time to stop before we move on
			os.system('/bin/systemctl start p25gateway.service')
			time.sleep(10) #Give the service time to start before we move on
		checkprocp25gateway.wait()

		checkprocm17gateway = subprocess.Popen('pgrep' + ' M17Gateway', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
		if not checkprocm17gateway.stdout.readlines():
			os.system('/bin/systemctl stop m17gateway.service')
			time.sleep(2) #Give the service time to stop before we move on
			os.system('/bin/systemctl start m17gateway.service')
			time.sleep(10) #Give the service time to start before we move on
		checkprocm17gateway.wait()

		checkprocysfparrot = subprocess.Popen('pgrep' + ' YSFParrot', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
		if not checkprocysfparrot.stdout.readlines():
			os.system('/bin/systemctl stop ysfparrot.service')
			time.sleep(2) #Give the service time to stop before we move on
			os.system('/bin/systemctl start ysfparrot.service')
			time.sleep(10) #Give the service time to start before we move on
		checkprocysfparrot.wait()

		checkprocp25parrot = subprocess.Popen('pgrep' + ' P25Parrot', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
		if not checkprocp25parrot.stdout.readlines():
			os.system('/bin/systemctl stop p25parrot.service')
			time.sleep(2) #Give the service time to stop before we move on
			os.system('/bin/systemctl start p25parrot.service')
			time.sleep(10) #Give the service time to start before we move on
		checkprocp25parrot.wait()

		checkprocysf2dmr = subprocess.Popen('pgrep' + ' YSF2DMR', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
		if not checkprocysf2dmr.stdout.readlines():
			os.system('/bin/systemctl stop ysf2dmr.service')
			time.sleep(2) #Give the service time to stop before we move on
			os.system('/bin/systemctl start ysf2dmr.service')
			time.sleep(10) #Give the service time to start before we move on
		checkprocysf2dmr.wait()

		checkprocysf2nxdn = subprocess.Popen('pgrep' + ' YSF2NXDN', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
		if not checkprocysf2nxdn.stdout.readlines():
			os.system('/bin/systemctl stop ysf2nxdn.service')
			time.sleep(2) #Give the service time to stop before we move on
			os.system('/bin/systemctl start ysf2nxdn.service')
			time.sleep(10) #Give the service time to start before we move on
		checkprocysf2nxdn.wait()

		checkprocysf2p25 = subprocess.Popen('pgrep' + ' YSF2P25', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
		if not checkprocysf2p25.stdout.readlines():
			os.system('/bin/systemctl stop ysf2p25.service')
			time.sleep(2) #Give the service time to stop before we move on
			os.system('/bin/systemctl start ysf2p25.service')
			time.sleep(10) #Give the service time to start before we move on
		checkprocysf2p25.wait()

		checkprocdmr2ysf = subprocess.Popen('pgrep' + ' DMR2YSF', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
		if not checkprocdmr2ysf.stdout.readlines():
			os.system('/bin/systemctl stop dmr2ysf.service')
			time.sleep(2) #Give the service time to stop before we move on
			os.system('/bin/systemctl start dmr2ysf.service')
			time.sleep(10) #Give the service time to start before we move on
		checkprocdmr2ysf.wait()

		checkprocdmr2nxdn = subprocess.Popen('pgrep' + ' DMR2NXDN', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
		if not checkprocdmr2nxdn.stdout.readlines():
			os.system('/bin/systemctl stop dmr2nxdn.service')
			time.sleep(2) #Give the service time to stop before we move on
			os.system('/bin/systemctl start dmr2nxdn.service')
			time.sleep(10) #Give the service time to start before we move on
		checkprocdmr2nxdn.wait()

		checkprocdapnetgateway = subprocess.Popen('pgrep' + ' DAPNETGateway', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
		if not checkprocdapnetgateway.stdout.readlines():
			os.system('/bin/systemctl stop dapnetgateway.service')
			time.sleep(2) #Give the service time to stop before we move on
			os.system('/bin/systemctl start dapnetgateway.service')
			time.sleep(10) #Give the service time to start before we move on
		checkprocdapnetgateway.wait()

	# Check the services that can be used by all systems
	checkprocaprs = subprocess.Popen('pgrep' + ' APRSGateway', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
	if not checkprocaprs.stdout.readlines():
		os.system('/bin/systemctl stop aprsgateway.service')
		time.sleep(2) #Give the service time to stop before we move on
		os.system('/bin/systemctl start aprsgateway.service')
		time.sleep(10) #Give the service time to start before we move on
	checkprocaprs.wait()
        
	checkprocirc = subprocess.Popen('pgrep' + ' ircddbgatewayd', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
	if not checkprocirc.stdout.readlines():
		os.system('/bin/systemctl stop ircddbgateway.service')
		time.sleep(2) #Give the service time to stop before we move on
		os.system('/bin/systemctl start ircddbgateway.service')
		time.sleep(10) #Give the service time to start before we move on
	checkprocirc.wait()

	checkproctime = subprocess.Popen('pgrep' + ' timeserverd', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
	if not checkproctime.stdout.readlines():
		os.system('/bin/systemctl stop timeserver.service')
		time.sleep(2) #Give the service time to stop before we move on
		os.system('/bin/systemctl start timeserver.service')
		time.sleep(10) #Give the service time to start before we move on
	checkproctime.wait()

	# If PiStar-Remote not enabled, dont try and keep it running
	pistarRemoteConfig = configparser.RawConfigParser()
	pistarRemoteConfig.read('/etc/pistar-remote')
	isEnabled = pistarRemoteConfig.get('enable', 'enabled')
	if isEnabled == 'true':
	    checkprocremote_bytes = subprocess.check_output(['/usr/local/sbin/pistar-remote.service', 'status'])
	    checkprocremote = checkprocremote_bytes.decode('utf-8')  # Decode bytes to string
	    if "not" in checkprocremote:
	        os.system('/bin/systemctl stop pistar-remote.service')
	        time.sleep(2) # Give the service time to stop before we move on
	        os.system('/bin/systemctl start pistar-remote.service')
	        time.sleep(10) # Give the service time to start before we move on

	time.sleep(120) #Time to wait between service checks
